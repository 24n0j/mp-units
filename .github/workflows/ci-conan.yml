# The MIT License (MIT)
#
# Copyright (c) 2018 Mateusz Pusz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: Conan CI

on:
  push:
    paths-ignore:
    - 'docs/**'
  pull_request:
    paths-ignore:
    - 'docs/**'

jobs:
  build:
    name: ${{ matrix.config.name }} ${{ matrix.build_type }} [downcast=${{ matrix.downcast_mode }}]
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows MSVC 2019",
            os: windows-latest,
            compiler: { type: VISUAL, version: 16, cc: "cl", cxx: "cl" }
          }
        - {
            name: "Ubuntu GCC 10.1.0",
            os: ubuntu-18.04,
            compiler: { type: GCC, version: 10, cc: "gcc-10", cxx: "g++-10" }
          }
        - {
            name: "Ubuntu GCC 10.2.0",
            os: ubuntu-20.04,
            compiler: { type: GCC, version: 10, cc: "gcc-10", cxx: "g++-10" }
          }
        # In case a Conan docker image will be needed to provide a specific configuration we can use a Docker image as follows
        # - {
        #     name: "Ubuntu GCC 10.2.0",
        #     os: ubuntu-20.04,
        #     compiler: { type: GCC, version: 10, cc: "gcc-10", cxx: "g++-10" },
        #     docker_image: conanio/gcc10
        #   }
        build_type: [ "Release", "Debug" ]
        downcast_mode: [ "on", "auto" ]
    steps:
      - uses: actions/checkout@v2
      - name: Install Ninja
        # TODO Find a proper syntax to make the below work
        # if: !matrix.config.docker_image
        shell: bash
        run: |
          if [ $RUNNER_OS == 'Linux' ]; then
            sudo apt install -y ninja-build
          elif [ $RUNNER_OS == 'Windows' ]; then
            choco install ninja
          else
            echo "'$RUNNER_OS' not supported"
            exit 1
          fi
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install Conan Package Tools
        run: |
          pip install -U conan_package_tools
      - name: Set Conan default profile
        # TODO Find a proper syntax to make the below work
        # if: !matrix.config.docker_image
        shell: bash
        run: |
          conan profile new --detect default
          if [ ${{ matrix.config.compiler.type }} == 'GCC' ]; then
            conan profile update settings.compiler.libcxx=libstdc++11 default
          elif [ ${{ matrix.config.compiler.type }} == 'CLANG' ]; then
            conan profile update settings.compiler.libcxx=libc++ default
          fi
          conan profile show default
      - name: Run Conan Package Tools
        shell: bash
        env:
          CONAN_USERNAME: mpusz
          CONAN_OPTIONS: mp-units:build_docs=False,mp-units:downcast_mode=${{ matrix.downcast_mode }}
          CONAN_UPLOAD: https://api.bintray.com/conan/mpusz/conan-mpusz
          CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
          CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}
          CONAN_CMAKE_GENERATOR: Ninja
          CONAN_BUILD_TYPES: ${{ matrix.build_type }}
          CC: ${{ matrix.config.compiler.cc }}
          CXX: ${{ matrix.config.compiler.cxx }}
          CONAN_${{ matrix.config.compiler.type }}_VERSIONS: ${{ matrix.config.compiler.version }}
        run: |
          if [ ! -z "${{ matrix.config.docker_image }}" ]; then
            export CONAN_DOCKER_IMAGE=${{ matrix.config.docker_image }}
          fi
          python build.py
